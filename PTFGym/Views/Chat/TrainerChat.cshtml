@using System.Security.Claims
@model List<PTFGym.Models.ChatMessage>
@{
    ViewData["Title"] = "Trener chat";
    var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
}

<div class="container mt-5">
    <h2>Chat sa članom</h2>

    <!-- Client Selection Dropdown -->
    <div class="mb-4">
        <label for="clientDropdown">Izaberite člana:</label>
        <select id="clientDropdown" class="form-control">
            <option value="">-- Izaberite člana --</option>
        </select>
    </div>

    <!-- Chat Box -->
    <div class="chat-box bg-light p-3" style="height: 400px; overflow-y: scroll;">
        @foreach (var message in Model)
        {
            <div class="@(message.SenderId == currentUserId ? "text-end" : "text-start")">
                <div class="d-inline-block p-2 m-2 rounded @(message.SenderId == currentUserId ? "bg-primary text-white" : "bg-secondary text-white")">
                    <p class="mb-0">@message.Message</p>
                    <small>@message.Timestamp.ToLocalTime().ToString("HH:mm")</small>
                </div>
            </div>
        }
    </div>

    <!-- Message Input Form -->
    <div class="mt-3">
        <div class="input-group">
            <input type="text" id="messageInput" class="form-control" placeholder="Napiši poruku..." />
            <button onclick="sendMessage()" class="btn btn-primary">Pošalji</button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        let selectedClientId = '';

        // Handle receiving messages
        connection.on("ReceiveMessage", (senderId, receiverId, message) => {
            if (senderId === selectedClientId || receiverId === selectedClientId) {
                addMessageToChat(senderId, message);
            }
        });

        // Start SignalR connection
        connection.start().catch(err => console.error(err));

        // Fetch users (clans) and populate the dropdown
        fetch('/Chat/GetUsers')
            .then(response => response.json())
            .then(data => {
                const clientDropdown = document.getElementById('clientDropdown');
                data.forEach(user => {
                    const option = document.createElement('option');
                    option.value = user.id;
                    option.text = user.ime;
                    clientDropdown.appendChild(option);
                });
            })
            .catch(error => console.error('Error fetching users:', error));

        // Handle client selection
        document.getElementById('clientDropdown').addEventListener('change', function() {
            selectedClientId = this.value;
            loadMessages(selectedClientId);
        });

        function loadMessages(clientId) {
            if (!clientId) return;

            fetch(`/Chat/GetMessages?receiverId=${encodeURIComponent(clientId)}`)
                .then(response => response.json())
                .then(data => {
                    const chatBox = document.querySelector('.chat-box');
                    chatBox.innerHTML = '';
                    data.forEach(msg => addMessageToChat(msg.senderId, msg.message, msg.timestamp));
                });
        }

        function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();

            if (!selectedClientId || !message) return;

            fetch('/Chat/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    receiverId: selectedClientId,
                    message: message
                })
            })
            .then(response => response.json())
            .then(data => {
                connection.invoke("SendMessage", data.senderId, data.receiverId, data.message);
                messageInput.value = '';
            })
            .catch(error => console.error('Error:', error));
        }

        function addMessageToChat(senderId, message, timestamp = new Date().toLocaleTimeString()) {
            const chatBox = document.querySelector('.chat-box');
            const currentUserId = '@currentUserId';
            const isCurrentUser = senderId === currentUserId;

            const messageHtml = `
                <div class="${isCurrentUser ? 'text-end' : 'text-start'}">
                    <div class="d-inline-block p-2 m-2 rounded ${isCurrentUser ? 'bg-primary text-white' : 'bg-secondary text-white'}">
                        <p class="mb-0">${message}</p>
                        <small>${timestamp}</small>
                    </div>
                </div>
            `;

            chatBox.insertAdjacentHTML('beforeend', messageHtml);
            chatBox.scrollTop = chatBox.scrollHeight;
        }
    </script>
}